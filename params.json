{"name":"erln8","tagline":"A sneaky Erlang version manager","body":"erln8 - an Erlang version manager\r\n=====\r\n\r\n## Status\r\n\r\nThe current version of erln8 is stable, and has been serving me (us?) well for the past year+. However, I'm in the process of rewriting it (April/May 2015) from scratch to make maintainability easier in the future. I'm also adding support for rebar/rebar3 versioning. Are there any other tools you'd like to be able to version w/ erln8?\r\nPing me if you'd like to help.\r\n\r\n## What is it?\r\n\r\nerln8 (erl-in-ate) allows you to compile and manage multiple versions of Erlang from source. Instead of downloading individual source packages, it downloads the Github OTP mirror so you are essentially downloading all available versions at once.  Additionaly, you can add your own git repos to support custom OTP patches etc.\r\n\r\nThe cool thing about erln8 is that you only need to add it to your PATH to use it. No funny environment tweaking ;-) It works by reading an `erln8.config` config file out of the ***current directory***, or by ***searching up the directory tree until it finds one.*** This allows you to \"set a version of Erlang to use for a project and forget it\".\r\n\r\n## What erln8 isn't\r\n\r\nerln8 does not manage Erlang build dependencies. If you are using erln8, I'm assuming you are already capable enough to figure these out on your own. \r\n\r\n## Installation\r\n\r\n\r\n***NOTE:*** erln8 version 0.9.0 breaks backwards compatibility. You'll need to `rm -rf ~/.erln8.d` and reinitialize erln8.\r\n\r\n### OSX\r\n```\r\nbrew install https://raw.github.com/metadave/homebrew/erln8/Library/Formula/erln8.rb\r\n ## this will install the glib dependency if not already installed\r\n```\r\n\r\nSee the Building section below to continue.\r\n\r\n### Ubuntu\r\n\r\n(Erlang + *general* erln8 deps)\r\n\r\n```\r\nsudo apt-get install build-essential libncurses5-dev openssl libssl-dev fop xsltproc unixodbc-dev libglib2.0-dev git autoconf\r\n```\r\n\r\nSee the Building section below to continue.\r\n\r\n### Fedora\r\n\r\n(Erlang + *general* erln8 deps)\r\n\r\n```\r\nsudo yum install gcc glibc-devel make ncurses-devel openssl-devel autoconf glib2-devel.x86_64 git\r\n```\r\n\r\nthis can be helpful as well:\r\n```\r\nyum groupinstall \"Development tools\"\r\n```\r\n\r\nSee the Building section below to continue.\r\n\r\n### FreeBSD\r\n\r\n[Install](https://www.freebsd.org/doc/handbook/ports-using.html) the `glib20` port:\r\n\r\n```\r\n# as root\r\ncd /usr/ports/devel/glib20\r\nmake install\r\n```\r\n\r\nInstall additional dependencies:\r\n\r\n```\r\npkg install git-2.3.0\r\npkg install autoconf-2.69\r\npkg install gmake\r\n```\r\n\r\nUse `gmake` instead of `make`:\r\n\r\n```\r\nexport MAKE_BIN=gmake\r\n```\r\n\r\n***NOTE*** to install erln8 on FreeBSD, you'll need to run:\r\n\r\n```\r\nsudo gmake install\r\n```\r\n\r\nSee the Building section below to continue.\r\n\r\n### Arch\r\n\r\nInstall erln8 from AUR:\r\n\r\n```\r\nyaourt erln8\r\n```\r\n\r\nOr grab the package tarball/PKGBUILD from: https://aur.archlinux.org/packages/erln8/\r\n\r\nThe PKBUILD repo lives at https://github.com/aerosol/erln8-aur\r\n\r\n### Building\r\n\r\n```\r\n # remove Erlang from your path!!\r\n\r\ngit clone https://github.com/metadave/erln8.git\r\ncd erln8\r\nmake\r\nsudo make install\r\n # NOTE: on FreeBSD, you MUST use\r\n #   sudo gmake install\r\n\r\n # the default location is /usr/local/bin/erln8\r\n # OR\r\nsudo make PREFIX=/opt install\r\n```\r\n\r\n### Running the tests (Optional)\r\n\r\nRunning the tests requires Ruby 1.9.3 + iniparse (which is installed via `bundle install`).\r\n\r\n```\r\ncd test\r\nbundle install\r\nmake\r\n```\r\n\r\n### Uninstall\r\n\r\n```\r\ncd erln8\r\nsudo make uninstall\r\n```\r\n\r\n## Dependencies\r\n* git\r\n* glib-2.0 \r\n* gio-2.0\r\n\r\n## Quickstart\r\n\r\nTo create erln8 config files, clone the default OTP repo, and build the latest version of Erlang (OTP-17.0.1 as of writing), simply run:\r\n\r\n```\r\nerln8 --quickstart\r\n```\r\n\r\nDepending on your system, it could take quite awhile to download the OTP Git repository and build Erlang. It might be a nice time to get a beer/coffee/tea/Tab. \r\n\r\n**Note**: there aren't any options passed to the `configure` script during build when  --quickstart is used. On OSX, this defaults to a measly 32-bits install.\r\n\r\nOnce the quickstart completes, you'll still need to cd to a directory where you want to use Erlang and run:\r\n\r\n```\r\nerln8 --use quickstart_build\r\n```\r\n\r\n\r\nThe quickstart will fail Erlang build dependencies aren't installed or correct. Once you have the required dependencies installed, you can continue the build with the following:\r\n\r\n```\r\nerln8 --build --tag OTP_R16B02 --id R16B02\r\n```\r\n\r\n## Initial setup\r\n\r\n***If you haven't added the erln8 directory to your path, do it now. If you already have Erlang in your path, REMOVE IT!***\r\n\r\nRun this once, it creates `~/.erln8.d` and `~/.erln8.d/config`\r\n\r\n```\r\nerln8 --init\r\n```\r\n\r\nNext, you'll need to clone the OTP source repo from Github if you don't have Erlang installed. This default repo is cloned to `~/.erln8.d/repos/default`.\r\n\r\n```\r\nerln8 --clone default\r\n```\r\n\r\nTo see a list of versions you can build, run:\r\n\r\n```\r\nerln8 --buildable\r\n```\r\n\r\nor\r\n\r\n```\r\nerln8 --buildable --repo default\r\n```\r\nreplacing `default` with whatever erln8-configured Git repo you want to use.\r\n\r\n\r\nIf you already have Erlang installed, skip down to Linking an Existing Erlang below.\r\n\r\nThe following command will build Erlang R16B02 using the `OTP_R16B02` tag from Git. This build can now be referred to by the --id value (see the erln8 --use example below). Also, see the ~/.erln8.d/config file for specific configs or add your own, or run erln8 --configs.\r\n\r\n```\r\n  erln8 --build --tag OTP_R16B02 --id r16b02 --config osx_llvm\r\n  erln8 --build --tag OTP_R15B01 --id r15b01 --config osx_llvm\r\n```\r\n\r\nYou can specify alternate Git repos to build from. `erln8 --repos` lists available repos or look in ~/.erln8.d/config\r\n\r\n```\r\n  erln8 --build --repo basho --tag OTP_R15B01 --id r15b01p --config osx_llvm\r\n```\r\n\r\n\r\n### Using gmake instead of make\r\n\r\nIf your platform requires the use of `gmake` instead of `make`, erln8 will\r\nhonor the `MAKE_BIN` environment variable.\r\n\r\n\r\n```\r\nexport MAKE_BIN=gmake\r\nor\r\nsetenv MAKE_BIN gmake\r\n// depending on the shell you use\r\n```\r\n\r\n##Linking an existing version Erlang\r\n\r\nIf you already have a version of Erlang build at an alternate location, you can *link* erlang to it.\r\n\r\nFor example, I have an old copy of Erlang R14B04 located in `/Users/dparfitt/erlang_R14B04`, and I'd like to reference it by the ID `R14B04`:\r\n\r\n```\r\nerln8 --link /Users/dparfitt/erlang_R14B04 --id R14B04\r\n```\r\n\r\nYou'll be able to run `erln8 --list` and see the linked version:\r\n\r\n```\r\nR16B02b3:slag:~$ erln8 --list\r\nR16B02b3 -> /Users/dparfitt/.erln8.d/otps/R16B02b3\r\nR16B02 -> /Users/dparfitt/.erln8.d/otps/R16B02\r\nR14B04 -> /Users/dparfitt/.erln8.d/otps/R14B04\r\n```\r\n\r\n\r\nIf I want to *unlink* this version of Erlang:\r\nversion of Erlang:\r\n\r\n**NOTE:** This does ***NOTE*** remove the Erlang directory that erln8 has linked to.\r\n\r\n```\r\nerln8 --unlink --id R14B04\r\n```\r\n\r\nat which point, R14B04 won't show up as a version of Erlang to use.\r\n\r\n```\r\nR16B02b3:slag:~$ erln8 --list\r\nR16B02b3 -> /Users/dparfitt/.erln8.d/otps/R16B02b3\r\nR16B02 -> /Users/dparfitt/.erln8.d/otps/R16B02\r\n```\r\n\r\n## Usage\r\n\r\nTo see which versions of Erlang are available for use from erln8, run:\r\n\r\n```\r\n  erln8 --list\r\n```\r\n\r\nFor any directory that has an Erlang project, you can run erln8 with the `--use `option to *mark that directory and all subdirectories to use a specific version of Erlang WHENEVER YOU CD INTO THAT DIRECTORY.*\r\n\r\n```\r\n erln8 --use r16b02\r\n```\r\n\r\nIf you need to change the version of Erlang that's already been configured for the current directory:\r\n\r\n```\r\n erln8 --use r16b01 --force\r\n```\r\n\r\n\r\nIf you want to find out which version of Erlang the cwd is using, \r\n\r\n```\r\nerln8 --show\r\n```\r\n\r\nThis command simply creates an `erln8.config` file in the cwd. You can even edit it by hand to specify the configured version of Erlang by **id**, or just rerun `erln8 --use some_other_version` to change the value.\r\n\r\n```\r\n[0]:prime:~$ cat erln8.config\r\n[Config]\r\nErlang=r16b02\r\n```\r\n\r\n### All Commands\r\n\r\nCommand | Description |\r\n:-------|:------------|\r\n`--init` | Initialize erln8 |\r\n`--use=id` | Set up the current directory to use a specific version of Erlang, where `id` is a version name along the lines of `r15b02` (or whatever you wish to name a distribution) |\r\n`--list` | List available Erlang installations |\r\n`--clone=repo` | Clone an Erlang source repository, where `repo` is the URL |\r\n`--fetch=repo` | Update source repositories, where `repo` is the URL |\r\n`--build` | Build a specific version of OTP from source (see more information in **Quickstart** above) |\r\n`--repo=repo` | Specify a repo name to build from |\r\n`--tag=git_tag` | Specify a repo branch/tag to build from |\r\n`--id=id` | A user-assigned name for a version of Erlang (used in conjunction with `--build` and other commands) |\r\n`--config=config` | Specify a build configuration (`default`, `osx_llvm`, `osx_gcc_env`, or `osx_gcc`) |\r\n`--show` | Show the configured version of Erlang in the current working directory |\r\n`--prompt` | Display the version of Erlang configured for this part of the directory tree |\r\n`--configs` | List the currently available build configurations |\r\n`--repos` | List build repos |\r\n`--link` | Link a non-erln8 build of Erlang to erln8 |\r\n`--unlink` | Unlink a non-erln8 build of Erlang from erln8 |\r\n`--force` | Use the force |\r\n`--no-color` | Turn off color output |\r\n`--buildable` | List tags to build from configured source repos |\r\n`--quickstart` | Initialize erln8 and build the latest version of Erlang |\r\n`--debug` | Debug erln8 |\r\n\r\n## Shell Completion\r\n\r\nerln8 provides shell completion for commands, available Erlang installations, and buildable Erlang installation. \r\n\r\n    source ~/path_to_erln8/bash_completion/erln8\r\n\r\nIf you installed on OSX via Brew (above), bash_completion is installed automatically for you. \r\n\r\n## Using erln8 outside of $HOME\r\n\r\nA section titled `SystemRoots` can be created and maintained inside of `~/.erln8.d/config` to specify versions of Erlang to use outside of $HOME. This can be useful if you don't have write access to these directories.\r\n\r\n```\r\n[SystemRoots]\r\n/opt/foo=R16B01\r\n/tmp=R15B01p\r\n```\r\n\r\n*NOTE*: a SystemRoot setting will NOT follow symlinks. On OSX, /tmp (among other paths) is actually a symlink to /private/tmp. Thanks Apple!\r\n\r\n## Setting up a default version to use\r\n\r\n### a) if you won't be using Erlang outside of $HOME\r\n\r\nSimply run `erln8` from your home directory with a version of Erlang that you'd like to use elsewhere. \r\n\r\n**NOTE**: if you are building/running Erlang source from outside of your home directory, you'll need to run erln8 at a location higher up the directory tree.\r\n\r\n### b) specifying a system wide default\r\n\r\nyou can specify a system default in `~/.erln8.d/config`:\r\n\r\n```\r\n[Erln8]\r\nsystem_default=R16B02\r\n```\r\n\r\nNote, the ID that is specified (R16B02 in this example) must have already been built or linked to erln8.\r\n\r\n## Keeping your source repos up-to-date\r\n\r\nTo get the latest OTP tags/branchs, you'll need to issue a fetch:\r\n\r\n```\r\nerln8 --fetch default\r\n```\r\nwhere `default` is the repo name. If you have multiple repositories configured, you'll need to issue fetch once per repo.\r\n\r\n\r\n## Customizing your shell prompt\r\n\r\n* Don't customize your prompt until you have erln8 fully installed.\r\n\r\nThe `--prompt` parameter displays the configured version of Erlang for the current working directory. \r\n\r\n```\r\nerln8 --prompt\r\n```\r\n\r\nFor example, if you are using *bash*, you could add the following snippet to your `.bash_profile`:\r\n\r\n```\r\nfunction erl_version() {\r\n  erln8 --prompt\r\n}\r\n\r\n # note, this also displays git info for the cwd\r\nPS1='\\[$(tput bold)\\]\\[$(tput setaf 2)\\]$(erl_version)\\[$(tput sgr0)\\]:\\[\\e[0;36m\\]$(__git_ps1 \"[%s]\")\\[\\e[m\\]\\[$(tput setaf 3)\\]\\h\\[$(tput sgr0)\\]:\\w\\$ '; [[ $EUID == 0 ]] &&\r\nPS1='\\[$(tput bold)\\]\\[$(tput setaf 2)\\]$(erl_version)\\[$(tput sgr0)\\]:\\[\\e[0;36m\\]$(__git_ps1 \"[%s]\")\\[\\e[m\\]\\[$(tput setaf 3)\\]\\h\\[$(tput sgr0)\\]:\\w\\$ '\r\n\r\n```\r\n\r\n![foo](https://www.evernote.com/shard/s55/sh/937bb22f-ac98-455b-8e6f-8367caf6fdea/0cd1beba8166544470fef351cb614c7e/deep/0/Shell.png)\r\n\r\n## Specifying a build config\r\n\r\nerln8 allows you to pass arbitrary flags to the `configure` script as part of a **config**. To add a config, edit `~/.erln8.d/config` and append a ***name=configstring*** to the `[Configs]` section.\r\n\r\n##### *Example:*\r\n\r\n```\r\n[Configs]\r\nosx_llvm=--disable-hipe --enable-smp-support --enable-threads --enable-kernel-poll --enable-darwin-64bit\r\n```\r\n\r\nTo specify environment variables to be used during a build, create a config ***name=configstring*** as show above, as well as an additional ***name_env=vars*** setting. Any config that has an accompanying *\r\n\r\n##### *Example:*\r\n\r\n```\r\n[Configs]\r\nosx_gcc=--disable-hipe --enable-smp-support --enable-threads --enable-kernel-poll --enable-darwin-64bit\r\nosx_gcc_env=CC=gcc-4.2 CPPFLAGS='-DNDEBUG' MAKEFLAGS='-j 3'\r\n```\r\n\r\n## Specifying a *default* build config\r\n\r\nIf `--config` isn't specified as a parameter to a `--build`, erln8 will use the `default_config` config variable specified in the `Erln8` section of `~/.erln8.d/config`. This is simply the name of a config as configured above.\r\n\r\n```\r\n[Erln8]\r\ndefault_config=default\r\n```\r\n\r\nFor example, if `--config` isn't specified as a parameter to a `--build`, the config `osx_llvm` will be used:\r\n\r\n```\r\n[Erln8]\r\ndefault_config=osx_llvm\r\n```\r\n\r\n## erln8 config file format\r\n\r\n* comments begin with the `#` character and may appear anywhere in the file\r\n* all keys and values are **case sensitive**\r\n\r\n####See also:\r\n\r\n0. https://developer.gnome.org/glib/2.38/glib-Key-value-file-parser.html\r\n1. http://freedesktop.org/wiki/Specifications/desktop-entry-spec/\r\n\r\n## Disabling color and/or the erln8 startup banner\r\n\r\nTo disable the erln8 startup banner, change the appropriate config settings located in the `[Erln8]` section of `~/.erln8.d/config`. Boolean values are either `true` or `false`, and are case sensitive.\r\n\r\n* **banner**\r\n    * Show the version of Erlang that erln8 is running upon startup\r\n    * `true` or `false`\r\n    \r\n* **color**\r\n    * `true` or `false`\r\n\r\n#### Example:\r\n\r\n```\r\n[Erln8]\r\nbanner=false\r\ncolor=false\r\n```\r\n\r\n## How does it work under the hood/bonnet?\r\n\r\nWhen erln8 is compiled, a single binary named `erln8` is built and installed by default to `/usr/local/bin`. Additionally, symbolic links to all the Erlang commands in a typical distribution are created *but linked to the single `erln8` binary* and are placed in `/usr/local/bin`. Thus, you have something like this:\r\n\r\n```\r\n$ ls -latr\r\n-rwxr-xr-x    1 root      admin    36256 Dec 27 17:51 erln8\r\nlrwxr-xr-x    1 root      admin       20 Dec 27 17:51 erlexec -> /usr/local/bin/erln8\r\nlrwxr-xr-x    1 root      admin       20 Dec 27 17:51 erlc -> /usr/local/bin/erln8\r\nlrwxr-xr-x    1 root      admin       20 Dec 27 17:51 erl_call -> /usr/local/bin/erln8\r\nlrwxr-xr-x    1 root      admin       20 Dec 27 17:51 erl.src -> /usr/local/bin/erln8\r\nlrwxr-xr-x    1 root      admin       20 Dec 27 17:51 erl -> /usr/local/bin/erln8\r\nlrwxr-xr-x    1 root      admin       20 Dec 27 17:51 epmd -> /usr/local/bin/erln8\r\n…\r\n```\r\n\r\nIn this setup, whenever you call an Erlang command, you are really calling the `erln8` command.\r\n\r\nWhen `erln8` starts, it checks `argv[0]` to see if it was called via a symlink (one of the erl, erlc, dialyzer, etc commands). If it was, it searches the current working directory for an `erln8.config` file. If one isn't found, it cd's up a directory and looks for an `erln8.config` file again. This continues until either an `erln8.config` file is found or the search reaches `/`. If an `erln8.config` file hasn't been found and `/` has been reached, the user hasn't configured a version of Erlang to use. Display an error and exit. Otherwise, use the version of Erlang specified in the erln8.config file and execv() that binary. execv() *replaces* the current process with the new process (see the man page for execv). So, a call to `erlc` will start up `erln8` via symlink, but the `erln8` process will be replaced during the execv() by the command located in the specified version of Erlang. \r\n\r\nThere is another layer of indirection as located in the ~/.erln8.d/otps/MY_OTP directory (with MY_OTP being a configured Erlang ID). This layer of indirection was added to take the legwork out of finding versioned binaries in the Erlang distribution. For example, the `to_erl` symlink points to `./dist/lib/erlang/erts-5.10.3/bin/to_erl`. erln8 only needs to know the command name to run it, without having to know the version # of erts.\r\n\r\n```\r\nR16B02:slag:~/.erln8.d/otps/R16B02$ ls -latr\r\ntotal 296\r\ndrwxr-xr-x   4 dparfitt  staff   136 Dec 23 10:43 dist\r\ndrwx------   3 dparfitt  staff   102 Dec 23 10:43 ..\r\nlrwxr-xr-x   1 dparfitt  staff    71 Dec 23 10:43 xml_from_edoc.escript -> ./dist/lib/erlang/lib/erl_docgen-0.3.4.1/priv/bin/xml_from_edoc.escript\r\nlrwxr-xr-x   1 dparfitt  staff    39 Dec 23 10:43 typer -> ./dist/lib/erlang/erts-5.10.3/bin/typer\r\nlrwxr-xr-x   1 dparfitt  staff    40 Dec 23 10:43 to_erl -> ./dist/lib/erlang/erts-5.10.3/bin/to_erl\r\nlrwxr-xr-x   1 dparfitt  staff    60 Dec 23 10:43 start_webtool -> ./dist/lib/erlang/lib/webtool-0.8.9.2/priv/bin/start_webtool\r\n...\r\n```\r\n\r\nThe `.dist` directory defined for each version of Erlang installed also allows erln8 to generate this list of symlinks for a *linked* version of Erlang (see above). Symlinks don't need to be placed in the linked directory (which could be anywhere in the filesystem).\r\n\r\n#Contributing\r\n\r\nFork this repo, create a feature branch using something like this:\r\n    \r\n```\r\ngit checkout -b branch_name\r\n```\r\n\r\nand submit a pull request. \r\n\r\nPlease send me an email (dparfitt at getchef dot com) and let me know if you want to work on any features.\r\n\r\nOnly friendly pull requests accepted.\r\n\r\n#License\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0.html\r\n\r\n---\r\n\r\n© 2015 Dave Parfitt\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}